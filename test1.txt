1)to initialize git we use command:-git init
2)to install git official website is:git-scm.command
3)git config --global core.editor "code --wait":- these command is used to show all the teraminal
message i.e vim file will be opened in vs code 
4)git add . :- add all the files in folder 
5)git checkout <branch or head>:-move to other branches or previous commits

6)git diff :-to see the changes in file before before staged or commits
7)git diff --stage:difference between the files after staged and previous staged
(in diff ++ and -- doesnt means the added or deleted it defines of file name)

8)git merge <branchname>:merge other branch into current branch
9)git branch:-to get the current branch
10)git checkout <branchname>:-to switch to the branch
11)git branch <branchname>:-to create new branch
12)git  switch<branchname>:-switch to other 

13)git log:show the record of previous commits
14)git reflog:uppose you moved back to previous head and when you get git log you won't
be able to see the previous commit .At that git rflog shows all the commits

15)git config --global --list:-get list of global values
16)git config --global <user.name> <"value">:-config values

17)conflicts:-when  changes  were made to same file by different branches at such time git wont
be able to understand to keep which change at such time conflicts  are raised


suppose u are working on some branch and then u want to move to different branch
without staging or commiting changes in  such cases stash is used stash is like a store where 
it store the changes and when u comeback to same branch to get those changes  back we use git stack pop
we can pop these changes to any branches
18)git stash:move to other branch without commiting or stagging changes
19)git stash pop:get stash changes
20)git stash apply:apply stash changes and keep


21)git remote add origin <url>:-add remote origin
22)git push -u origin main:push the commits to  remote
by adding -u it keep tracks on the current branch so that when we push next time we can just write git push
23)git remote -v:-check the current remote origin